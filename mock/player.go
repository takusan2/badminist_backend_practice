// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/okadatakuya/my_folder/dev/00_app/badminist/backend/domain/player.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/takuya-okada-01/badminist-backend/domain"
)

// MockIPlayerRepository is a mock of IPlayerRepository interface.
type MockIPlayerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIPlayerRepositoryMockRecorder
}

// MockIPlayerRepositoryMockRecorder is the mock recorder for MockIPlayerRepository.
type MockIPlayerRepositoryMockRecorder struct {
	mock *MockIPlayerRepository
}

// NewMockIPlayerRepository creates a new mock instance.
func NewMockIPlayerRepository(ctrl *gomock.Controller) *MockIPlayerRepository {
	mock := &MockIPlayerRepository{ctrl: ctrl}
	mock.recorder = &MockIPlayerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPlayerRepository) EXPECT() *MockIPlayerRepositoryMockRecorder {
	return m.recorder
}

// DeletePlayer mocks base method.
func (m *MockIPlayerRepository) DeletePlayer(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePlayer", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePlayer indicates an expected call of DeletePlayer.
func (mr *MockIPlayerRepositoryMockRecorder) DeletePlayer(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePlayer", reflect.TypeOf((*MockIPlayerRepository)(nil).DeletePlayer), id)
}

// InsertPlayer mocks base method.
func (m *MockIPlayerRepository) InsertPlayer(player *domain.Player) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertPlayer", player)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertPlayer indicates an expected call of InsertPlayer.
func (mr *MockIPlayerRepositoryMockRecorder) InsertPlayer(player interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPlayer", reflect.TypeOf((*MockIPlayerRepository)(nil).InsertPlayer), player)
}

// SelectAttendPlayers mocks base method.
func (m *MockIPlayerRepository) SelectAttendPlayers(communityID string) ([]domain.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAttendPlayers", communityID)
	ret0, _ := ret[0].([]domain.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAttendPlayers indicates an expected call of SelectAttendPlayers.
func (mr *MockIPlayerRepositoryMockRecorder) SelectAttendPlayers(communityID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAttendPlayers", reflect.TypeOf((*MockIPlayerRepository)(nil).SelectAttendPlayers), communityID)
}

// SelectPlayer mocks base method.
func (m *MockIPlayerRepository) SelectPlayer(playerID string) (domain.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectPlayer", playerID)
	ret0, _ := ret[0].(domain.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectPlayer indicates an expected call of SelectPlayer.
func (mr *MockIPlayerRepositoryMockRecorder) SelectPlayer(playerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectPlayer", reflect.TypeOf((*MockIPlayerRepository)(nil).SelectPlayer), playerID)
}

// SelectPlayersByCommunityID mocks base method.
func (m *MockIPlayerRepository) SelectPlayersByCommunityID(communityID string) ([]domain.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectPlayersByCommunityID", communityID)
	ret0, _ := ret[0].([]domain.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectPlayersByCommunityID indicates an expected call of SelectPlayersByCommunityID.
func (mr *MockIPlayerRepositoryMockRecorder) SelectPlayersByCommunityID(communityID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectPlayersByCommunityID", reflect.TypeOf((*MockIPlayerRepository)(nil).SelectPlayersByCommunityID), communityID)
}

// UpdatePlayer mocks base method.
func (m *MockIPlayerRepository) UpdatePlayer(player *domain.Player) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlayer", player)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePlayer indicates an expected call of UpdatePlayer.
func (mr *MockIPlayerRepositoryMockRecorder) UpdatePlayer(player interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlayer", reflect.TypeOf((*MockIPlayerRepository)(nil).UpdatePlayer), player)
}
