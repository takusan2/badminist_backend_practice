// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/okadatakuya/my_folder/dev/00_app/badminist/backend/domain/community.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/takuya-okada-01/badminist-backend/domain"
)

// MockICommunityRepository is a mock of ICommunityRepository interface.
type MockICommunityRepository struct {
	ctrl     *gomock.Controller
	recorder *MockICommunityRepositoryMockRecorder
}

// MockICommunityRepositoryMockRecorder is the mock recorder for MockICommunityRepository.
type MockICommunityRepositoryMockRecorder struct {
	mock *MockICommunityRepository
}

// NewMockICommunityRepository creates a new mock instance.
func NewMockICommunityRepository(ctrl *gomock.Controller) *MockICommunityRepository {
	mock := &MockICommunityRepository{ctrl: ctrl}
	mock.recorder = &MockICommunityRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICommunityRepository) EXPECT() *MockICommunityRepositoryMockRecorder {
	return m.recorder
}

// DeleteCommunity mocks base method.
func (m *MockICommunityRepository) DeleteCommunity(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCommunity", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCommunity indicates an expected call of DeleteCommunity.
func (mr *MockICommunityRepositoryMockRecorder) DeleteCommunity(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCommunity", reflect.TypeOf((*MockICommunityRepository)(nil).DeleteCommunity), id)
}

// InsertCommunity mocks base method.
func (m *MockICommunityRepository) InsertCommunity(community *domain.Community) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertCommunity", community)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertCommunity indicates an expected call of InsertCommunity.
func (mr *MockICommunityRepositoryMockRecorder) InsertCommunity(community interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCommunity", reflect.TypeOf((*MockICommunityRepository)(nil).InsertCommunity), community)
}

// SelectCommunityByID mocks base method.
func (m *MockICommunityRepository) SelectCommunityByID(id string) (domain.Community, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectCommunityByID", id)
	ret0, _ := ret[0].(domain.Community)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectCommunityByID indicates an expected call of SelectCommunityByID.
func (mr *MockICommunityRepositoryMockRecorder) SelectCommunityByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectCommunityByID", reflect.TypeOf((*MockICommunityRepository)(nil).SelectCommunityByID), id)
}

// UpdateCommunity mocks base method.
func (m *MockICommunityRepository) UpdateCommunity(community *domain.Community) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCommunity", community)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCommunity indicates an expected call of UpdateCommunity.
func (mr *MockICommunityRepositoryMockRecorder) UpdateCommunity(community interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCommunity", reflect.TypeOf((*MockICommunityRepository)(nil).UpdateCommunity), community)
}
