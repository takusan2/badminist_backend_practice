// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/okadatakuya/my_folder/dev/00_app/badminist/backend/domain/user.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/takuya-okada-01/badminist-backend/domain"
)

// MockIUserRepository is a mock of IUserRepository interface.
type MockIUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIUserRepositoryMockRecorder
}

// MockIUserRepositoryMockRecorder is the mock recorder for MockIUserRepository.
type MockIUserRepositoryMockRecorder struct {
	mock *MockIUserRepository
}

// NewMockIUserRepository creates a new mock instance.
func NewMockIUserRepository(ctrl *gomock.Controller) *MockIUserRepository {
	mock := &MockIUserRepository{ctrl: ctrl}
	mock.recorder = &MockIUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserRepository) EXPECT() *MockIUserRepositoryMockRecorder {
	return m.recorder
}

// DeleteUser mocks base method.
func (m *MockIUserRepository) DeleteUser(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockIUserRepositoryMockRecorder) DeleteUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockIUserRepository)(nil).DeleteUser), id)
}

// InsertUser mocks base method.
func (m *MockIUserRepository) InsertUser(user *domain.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockIUserRepositoryMockRecorder) InsertUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockIUserRepository)(nil).InsertUser), user)
}

// SelectUser mocks base method.
func (m *MockIUserRepository) SelectUser(id string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUser", id)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUser indicates an expected call of SelectUser.
func (mr *MockIUserRepositoryMockRecorder) SelectUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUser", reflect.TypeOf((*MockIUserRepository)(nil).SelectUser), id)
}

// SelectUserByEmail mocks base method.
func (m *MockIUserRepository) SelectUserByEmail(mail string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserByEmail", mail)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserByEmail indicates an expected call of SelectUserByEmail.
func (mr *MockIUserRepositoryMockRecorder) SelectUserByEmail(mail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserByEmail", reflect.TypeOf((*MockIUserRepository)(nil).SelectUserByEmail), mail)
}

// UpdateUser mocks base method.
func (m *MockIUserRepository) UpdateUser(user *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockIUserRepositoryMockRecorder) UpdateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockIUserRepository)(nil).UpdateUser), user)
}

// MockIAuthUseCase is a mock of IAuthUseCase interface.
type MockIAuthUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthUseCaseMockRecorder
}

// MockIAuthUseCaseMockRecorder is the mock recorder for MockIAuthUseCase.
type MockIAuthUseCaseMockRecorder struct {
	mock *MockIAuthUseCase
}

// NewMockIAuthUseCase creates a new mock instance.
func NewMockIAuthUseCase(ctrl *gomock.Controller) *MockIAuthUseCase {
	mock := &MockIAuthUseCase{ctrl: ctrl}
	mock.recorder = &MockIAuthUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthUseCase) EXPECT() *MockIAuthUseCaseMockRecorder {
	return m.recorder
}

// LoginWithEmailAndPassword mocks base method.
func (m *MockIAuthUseCase) LoginWithEmailAndPassword(email, password string) (domain.TokenString, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginWithEmailAndPassword", email, password)
	ret0, _ := ret[0].(domain.TokenString)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginWithEmailAndPassword indicates an expected call of LoginWithEmailAndPassword.
func (mr *MockIAuthUseCaseMockRecorder) LoginWithEmailAndPassword(email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginWithEmailAndPassword", reflect.TypeOf((*MockIAuthUseCase)(nil).LoginWithEmailAndPassword), email, password)
}

// SignUpWithEmailAndPassword mocks base method.
func (m *MockIAuthUseCase) SignUpWithEmailAndPassword(email, password string) (domain.TokenString, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUpWithEmailAndPassword", email, password)
	ret0, _ := ret[0].(domain.TokenString)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUpWithEmailAndPassword indicates an expected call of SignUpWithEmailAndPassword.
func (mr *MockIAuthUseCaseMockRecorder) SignUpWithEmailAndPassword(email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUpWithEmailAndPassword", reflect.TypeOf((*MockIAuthUseCase)(nil).SignUpWithEmailAndPassword), email, password)
}
