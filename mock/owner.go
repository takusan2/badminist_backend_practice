// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/okadatakuya/my_folder/dev/my_app/badminist/backend/domain/owner.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
	domain "github.com/takuya-okada-01/badminist-backend/domain"
)

// MockIOwnerRepository is a mock of IOwnerRepository interface.
type MockIOwnerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIOwnerRepositoryMockRecorder
}

// MockIOwnerRepositoryMockRecorder is the mock recorder for MockIOwnerRepository.
type MockIOwnerRepositoryMockRecorder struct {
	mock *MockIOwnerRepository
}

// NewMockIOwnerRepository creates a new mock instance.
func NewMockIOwnerRepository(ctrl *gomock.Controller) *MockIOwnerRepository {
	mock := &MockIOwnerRepository{ctrl: ctrl}
	mock.recorder = &MockIOwnerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOwnerRepository) EXPECT() *MockIOwnerRepositoryMockRecorder {
	return m.recorder
}

// DeleteOwner mocks base method.
func (m *MockIOwnerRepository) DeleteOwner(userID, communityID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOwner", userID, communityID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOwner indicates an expected call of DeleteOwner.
func (mr *MockIOwnerRepositoryMockRecorder) DeleteOwner(userID, communityID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOwner", reflect.TypeOf((*MockIOwnerRepository)(nil).DeleteOwner), userID, communityID)
}

// InsertOwner mocks base method.
func (m *MockIOwnerRepository) InsertOwner(owner domain.Owner) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOwner", owner)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOwner indicates an expected call of InsertOwner.
func (mr *MockIOwnerRepositoryMockRecorder) InsertOwner(owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOwner", reflect.TypeOf((*MockIOwnerRepository)(nil).InsertOwner), owner)
}

// SelectOwner mocks base method.
func (m *MockIOwnerRepository) SelectOwner(criteria domain.OwnerCriteria) (domain.Owner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectOwner", criteria)
	ret0, _ := ret[0].(domain.Owner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectOwner indicates an expected call of SelectOwner.
func (mr *MockIOwnerRepositoryMockRecorder) SelectOwner(criteria interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectOwner", reflect.TypeOf((*MockIOwnerRepository)(nil).SelectOwner), criteria)
}

// SelectOwners mocks base method.
func (m *MockIOwnerRepository) SelectOwners(criteria domain.OwnerCriteria) ([]domain.Owner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectOwners", criteria)
	ret0, _ := ret[0].([]domain.Owner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectOwners indicates an expected call of SelectOwners.
func (mr *MockIOwnerRepositoryMockRecorder) SelectOwners(criteria interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectOwners", reflect.TypeOf((*MockIOwnerRepository)(nil).SelectOwners), criteria)
}

// UpdateOwner mocks base method.
func (m *MockIOwnerRepository) UpdateOwner(owner *domain.Owner) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOwner", owner)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOwner indicates an expected call of UpdateOwner.
func (mr *MockIOwnerRepositoryMockRecorder) UpdateOwner(owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOwner", reflect.TypeOf((*MockIOwnerRepository)(nil).UpdateOwner), owner)
}

// MockIOwnerUseCase is a mock of IOwnerUseCase interface.
type MockIOwnerUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockIOwnerUseCaseMockRecorder
}

// MockIOwnerUseCaseMockRecorder is the mock recorder for MockIOwnerUseCase.
type MockIOwnerUseCaseMockRecorder struct {
	mock *MockIOwnerUseCase
}

// NewMockIOwnerUseCase creates a new mock instance.
func NewMockIOwnerUseCase(ctrl *gomock.Controller) *MockIOwnerUseCase {
	mock := &MockIOwnerUseCase{ctrl: ctrl}
	mock.recorder = &MockIOwnerUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOwnerUseCase) EXPECT() *MockIOwnerUseCaseMockRecorder {
	return m.recorder
}

// DeleteOwner mocks base method.
func (m *MockIOwnerUseCase) DeleteOwner(ctx *gin.Context, userID, delUserID, delCommunityID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOwner", ctx, userID, delUserID, delCommunityID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOwner indicates an expected call of DeleteOwner.
func (mr *MockIOwnerUseCaseMockRecorder) DeleteOwner(ctx, userID, delUserID, delCommunityID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOwner", reflect.TypeOf((*MockIOwnerUseCase)(nil).DeleteOwner), ctx, userID, delUserID, delCommunityID)
}

// InsertOwner mocks base method.
func (m *MockIOwnerUseCase) InsertOwner(ctx *gin.Context, owner domain.Owner) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOwner", ctx, owner)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOwner indicates an expected call of InsertOwner.
func (mr *MockIOwnerUseCaseMockRecorder) InsertOwner(ctx, owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOwner", reflect.TypeOf((*MockIOwnerUseCase)(nil).InsertOwner), ctx, owner)
}

// SelectOwnerByUserIDAndCommunityID mocks base method.
func (m *MockIOwnerUseCase) SelectOwnerByUserIDAndCommunityID(ctx *gin.Context, userID, communityID string) (domain.Owner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectOwnerByUserIDAndCommunityID", ctx, userID, communityID)
	ret0, _ := ret[0].(domain.Owner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectOwnerByUserIDAndCommunityID indicates an expected call of SelectOwnerByUserIDAndCommunityID.
func (mr *MockIOwnerUseCaseMockRecorder) SelectOwnerByUserIDAndCommunityID(ctx, userID, communityID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectOwnerByUserIDAndCommunityID", reflect.TypeOf((*MockIOwnerUseCase)(nil).SelectOwnerByUserIDAndCommunityID), ctx, userID, communityID)
}

// SelectOwnersByCommunityID mocks base method.
func (m *MockIOwnerUseCase) SelectOwnersByCommunityID(ctx *gin.Context, communityID string) ([]domain.Owner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectOwnersByCommunityID", ctx, communityID)
	ret0, _ := ret[0].([]domain.Owner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectOwnersByCommunityID indicates an expected call of SelectOwnersByCommunityID.
func (mr *MockIOwnerUseCaseMockRecorder) SelectOwnersByCommunityID(ctx, communityID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectOwnersByCommunityID", reflect.TypeOf((*MockIOwnerUseCase)(nil).SelectOwnersByCommunityID), ctx, communityID)
}

// UpdateOwner mocks base method.
func (m *MockIOwnerUseCase) UpdateOwner(ctx *gin.Context, userID string, owner *domain.Owner) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOwner", ctx, userID, owner)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOwner indicates an expected call of UpdateOwner.
func (mr *MockIOwnerUseCaseMockRecorder) UpdateOwner(ctx, userID, owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOwner", reflect.TypeOf((*MockIOwnerUseCase)(nil).UpdateOwner), ctx, userID, owner)
}
